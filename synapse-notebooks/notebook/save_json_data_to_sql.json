{
	"name": "save_json_data_to_sql",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DefaultPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c3199534-8b6b-4652-9f8b-ef8c74944a8a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "csharp"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a1a27566-3e3c-42d7-a372-692095cd8521/resourceGroups/SerengetiDataLab/providers/Microsoft.Synapse/workspaces/serengetidatalab/bigDataPools/DefaultPool",
				"name": "DefaultPool",
				"type": "Spark",
				"endpoint": "https://serengetidatalab.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DefaultPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#r \"nuget: Microsoft.Azure.Storage.Common\"\n",
					"#r \"nuget: Microsoft.Azure.Storage.Blob\"\n",
					"#r \"nuget: Microsoft.Azure.Storage.File\"\n",
					"#r \"nuget: Newtonsoft.Json\"\n",
					"#r \"nuget: System.Data.SqlClient\""
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"using Microsoft.Azure.Storage;\n",
					"using Microsoft.Azure.Storage.Blob;\n",
					"using System.IO;\n",
					"using Newtonsoft.Json;\n",
					"using System.Data.SqlClient;\n",
					""
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CloudBlobContainer blobContainer;\n",
					"CloudBlobDirectory blobDirectory;\n",
					"SqlConnection sqlConn;\n",
					"\n",
					"\n",
					"var sqlCon = new SqlConnection(connectionString);\n",
					"\n",
					"sqlCon.Open();\n",
					"\n",
					"private void InitStorageAndDb()\n",
					"{\n",
					"    // Create a FileEndpoint for the destination ADLS\n",
					"    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(storageConnectionString);\n",
					"\n",
					"    var blobClient= storageAccount.CreateCloudBlobClient();\n",
					"    blobContainer =  blobClient.GetContainerReference(\"snapshot-serengeti\");\n",
					"    blobDirectory = blobContainer.GetDirectoryReference(\"metadata\");\n",
					"    sqlConn = new SqlConnection(dbConnectionString);\n",
					"}"
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task<dynamic> ReadJsonFile (CloudBlockBlob jsonBlob)\n",
					"{\n",
					"    using (var memoryStream = new MemoryStream())\n",
					"    {\n",
					"        // Download the JSON file to a memory stream\n",
					"        await jsonBlob.DownloadToStreamAsync(memoryStream);\n",
					"\n",
					"        // Reset the memory stream position\n",
					"        memoryStream.Position = 0;\n",
					"\n",
					"        // Use a JsonTextReader to read the JSON file in chunks\n",
					"        using (var jsonTextReader = new JsonTextReader(new StreamReader(memoryStream)) { CloseInput = false })\n",
					"        {\n",
					"            // Use a JsonSerializer to deserialize the JSON file\n",
					"            var jsonSerializer = new JsonSerializer();\n",
					"\n",
					"            // Read the JSON file in chunks and deserialize it\n",
					"            dynamic jsonObject = jsonSerializer.Deserialize<dynamic>(jsonTextReader);\n",
					"\n",
					"            return jsonObject;\n",
					"        }\n",
					"    }\n",
					"}\n",
					""
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task CreateTablesAsync()\n",
					"{\n",
					"    var commands = new Dictionary<string, string>()\n",
					"    {\n",
					"        {\"images\", \"CREATE TABLE images (id VARCHAR(255), file_name VARCHAR(255), frame_num INT, seq_id VARCHAR(255), width INT, height INT, corrupt BIT, location VARCHAR(255), seq_num_frames INT, datetime DATETIME);\"},\n",
					"        {\"categories\", \"CREATE TABLE categories (id INT, name VARCHAR(255));\"},\n",
					"        {\"annotations\", \"CREATE TABLE annotations (id VARCHAR(36) NOT NULL, category_id INT NOT NULL, seq_id VARCHAR(20) NOT NULL, season VARCHAR(2) NOT NULL, datetime DATETIME NOT NULL, subject_id VARCHAR(10) NOT NULL, count INT NOT NULL, standing DECIMAL(4, 2) NOT NULL, resting DECIMAL(4, 2) NOT NULL, moving DECIMAL(4, 2) NOT NULL, interacting DECIMAL(4, 2) NOT NULL, young_present DECIMAL(4, 2) NOT NULL, image_id VARCHAR(50) NOT NULL, location VARCHAR(3) NOT NULL, sequence_level_annotation BIT NOT NULL)\"}\n",
					"    };\n",
					"\n",
					"    await sqlConn.OpenAsync();\n",
					"\n",
					"    foreach(var command in commands)\n",
					"    {\n",
					"        using(SqlCommand sqlCmd =new SqlCommand(command.Value, sqlConn))\n",
					"        {\n",
					"            try\n",
					"            {\n",
					"                await sqlCmd.ExecuteNonQueryAsync();\n",
					"                Console.WriteLine($\"Table {command.Key} created successfully.\");\n",
					"            }\n",
					"            catch(Exception ex)\n",
					"            {\n",
					"                Console.WriteLine($\"Error creating table {command.Key}: \" + ex.Message);\n",
					"            }\n",
					"        }   \n",
					"    }\n",
					"\n",
					"    await sqlConn.CloseAsync();\n",
					"}"
				],
				"execution_count": 108
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task InsertCategoriesAsync(dynamic categories)\n",
					"{\n",
					"    await sqlConn.OpenAsync();\n",
					"\n",
					"    // Create a temporary table to store the data you want to insert\n",
					"    using (SqlCommand createTempTableCmd = new SqlCommand(\"CREATE TABLE #temp_categories (id INT, name VARCHAR(255));\", sqlConn))\n",
					"    {\n",
					"        createTempTableCmd.ExecuteNonQuery();\n",
					"    }\n",
					"\n",
					"    // Insert data into the temporary table\n",
					"    string insertIntoTempTableCommand = \"INSERT INTO #temp_categories (id, name) VALUES (@id, @name)\";\n",
					"    foreach (var category in categories)\n",
					"    {\n",
					"        using (SqlCommand insertIntoTempTableCmd = new SqlCommand(insertIntoTempTableCommand, sqlConn))\n",
					"        {\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@id\", (string)category[\"id\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@name\", (string)category[\"name\"]);\n",
					"\n",
					"            insertIntoTempTableCmd.ExecuteNonQuery();\n",
					"        }\n",
					"    }\n",
					"\n",
					"    // Insert only unique records into the target table\n",
					"    string insertIntoCategoriesCommand = \"INSERT INTO categories (id, name) SELECT id, name FROM #temp_categories WHERE NOT EXISTS (SELECT 1 FROM categories WHERE categories.id = #temp_categories.id)\";\n",
					"    using (SqlCommand insertIntoCategoriesCmd = new SqlCommand(insertIntoCategoriesCommand, sqlConn))\n",
					"    {\n",
					"        await insertIntoCategoriesCmd.ExecuteNonQueryAsync();\n",
					"    }\n",
					"\n",
					"    // Drop the temporary table\n",
					"    using (SqlCommand dropTempTableCmd = new SqlCommand(\"DROP TABLE #temp_categories\", sqlConn))\n",
					"    {\n",
					"        dropTempTableCmd.ExecuteNonQuery();\n",
					"    }\n",
					"\n",
					"    await sqlConn.CloseAsync();\n",
					"}"
				],
				"execution_count": 96
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task InsertImagesAsync(dynamic images)\n",
					"{\n",
					"    await sqlConn.OpenAsync();\n",
					"\n",
					"    // Create a temporary table to store the data you want to insert\n",
					"    using (SqlCommand createTempTableCmd = new SqlCommand(\"CREATE TABLE #temp_images (id VARCHAR(255), file_name VARCHAR(255), frame_num INT, seq_id VARCHAR(255), width INT, height INT, corrupt BIT, location VARCHAR(255), seq_num_frames INT, datetime DATETIME);\", sqlConn))\n",
					"    {\n",
					"        createTempTableCmd.ExecuteNonQuery();\n",
					"    }\n",
					"\n",
					"    // Insert data into the temporary table\n",
					"    string insertIntoTempTableCommand = \"INSERT INTO #temp_images (id, file_name, frame_num, seq_id, width, height, corrupt, location, seq_num_frames, datetime) VALUES (@id, @file_name, @frame_num, @seq_id, @width, @height, @corrupt, @location, @seq_num_frames, @datetime)\";\n",
					"    foreach (var image in images)\n",
					"    {\n",
					"        using (SqlCommand insertIntoTempTableCmd = new SqlCommand(insertIntoTempTableCommand, sqlConn))\n",
					"        {\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@id\", (string)image[\"id\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@file_name\", (string)image[\"file_name\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@frame_num\", (int)image[\"frame_num\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@seq_id\", (string)image[\"seq_id\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@width\", (int)image[\"width\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@height\", (int)image[\"height\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@corrupt\", (bool)image[\"corrupt\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@location\", (string)image[\"location\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@seq_num_frames\", (int)image[\"seq_num_frames\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@datetime\", (DateTime)image[\"datetime\"]);\n",
					"\n",
					"            insertIntoTempTableCmd.ExecuteNonQuery();\n",
					"        }\n",
					"    }\n",
					"\n",
					"    // Insert only unique records into the target table\n",
					"    string insertIntoImagesCommand = \"INSERT INTO images (id, file_name, frame_num, seq_id, width, height, corrupt, location, seq_num_frames, datetime) SELECT id, file_name, frame_num, seq_id, width, height, corrupt, location, seq_num_frames, datetime FROM #temp_images WHERE NOT EXISTS (SELECT 1 FROM images WHERE images.id = #temp_images.id)\";\n",
					"    using (SqlCommand insertIntoImagesCmd = new SqlCommand(insertIntoImagesCommand, sqlConn))\n",
					"    {\n",
					"        await insertIntoImagesCmd.ExecuteNonQueryAsync();\n",
					"    }\n",
					"    // Drop the temporary table\n",
					"    using (SqlCommand dropTempTableCmd = new SqlCommand(\"DROP TABLE #temp_images\", sqlConn))\n",
					"    {\n",
					"        dropTempTableCmd.ExecuteNonQuery();\n",
					"    }\n",
					"\n",
					"\n",
					"    await sqlConn.CloseAsync();\n",
					"\n",
					"}"
				],
				"execution_count": 99
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task InsertAnnotationsAsync(dynamic annotations)\n",
					"{\n",
					"    await sqlConn.OpenAsync();\n",
					"\n",
					"    // Create a temporary table to store the data you want to insert\n",
					"    using (SqlCommand createTempTableCmd = new SqlCommand(\"CREATE TABLE #temp_annotations (id VARCHAR(255), category_id INT, seq_id VARCHAR(255), season VARCHAR(255), datetime DATETIME, subject_id VARCHAR(255), count VARCHAR(255), standing FLOAT, resting FLOAT, moving FLOAT, interacting FLOAT, young_present FLOAT, image_id VARCHAR(255), location VARCHAR(255));\", sqlConn))\n",
					"    {\n",
					"        createTempTableCmd.ExecuteNonQuery();\n",
					"    }\n",
					"\n",
					"    // Insert data into the temporary table\n",
					"    string insertIntoTempTableCommand = \"INSERT INTO #temp_annotations (id, category_id, seq_id, season, datetime, subject_id, count, standing, resting, moving, interacting, young_present, image_id, location) VALUES (@id, @category_id, @seq_id, @season, @datetime, @subject_id, @count, @standing, @resting, @moving, @interacting, @young_present, @image_id, @location)\";\n",
					"    foreach (var annotation in annotations)\n",
					"    {\n",
					"        using (SqlCommand insertIntoTempTableCmd = new SqlCommand(insertIntoTempTableCommand, sqlConn))\n",
					"        {\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@id\", (string)annotation[\"id\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@category_id\", (int)annotation[\"category_id\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@seq_id\", (string)annotation[\"seq_id\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@season\", (string)annotation[\"season\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@datetime\", (DateTime)annotation[\"datetime\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@subject_id\", (string)annotation[\"subject_id\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@count\", (string)annotation[\"count\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@standing\", (float)annotation[\"standing\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@resting\", (float)annotation[\"resting\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@moving\", (float)annotation[\"moving\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@interacting\", (float)annotation[\"interacting\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@young_present\", (float)annotation[\"young_present\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@image_id\", (string)annotation[\"image_id\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@location\", (string)annotation[\"location\"]);\n",
					"\n",
					"            insertIntoTempTableCmd.ExecuteNonQuery();\n",
					"        }\n",
					"\n",
					"\n",
					"    }\n",
					"\n",
					"    // Insert only unique records into the target table\n",
					"    using (SqlCommand insertIntoTargetTableCmd = new SqlCommand(\"INSERT INTO annotations (id, category_id, seq_id, season, datetime, subject_id, count, standing, resting, moving, interacting, young_present, image_id, location) SELECT id, category_id, seq_id, season, datetime, subject_id, count, standing, resting, moving, interacting, young_present, image_id, location FROM #temp_annotations WHERE NOT EXISTS (SELECT * FROM annotations WHERE id = #temp_annotations.id);\", sqlConn))\n",
					"    {\n",
					"        insertIntoTargetTableCmd.ExecuteNonQuery();\n",
					"    }\n",
					"\n",
					"    // Drop the temporary table\n",
					"    using (SqlCommand dropTempTableCmd = new SqlCommand(\"DROP TABLE #temp_annotations\", sqlConn))\n",
					"    {\n",
					"        dropTempTableCmd.ExecuteNonQuery();\n",
					"    }\n",
					"\n",
					"    await sqlConn.CloseAsync();\n",
					"}"
				],
				"execution_count": 100
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"InitStorageAndDb();\n",
					"await CreateTablesAsync();\n",
					"\n",
					"//season files\n",
					"var seasonFiles = new string[]\n",
					"{\n",
					"    \"SnapshotSerengetiS01.json\",\n",
					"    \"SnapshotSerengetiS02.json\",\n",
					"    \"SnapshotSerengetiS03.json\",\n",
					"    \"SnapshotSerengetiS04.json\",\n",
					"    \"SnapshotSerengetiS05.json\",\n",
					"    \"SnapshotSerengetiS06.json\",\n",
					"    \"SnapshotSerengetiS07.json\",\n",
					"    \"SnapshotSerengetiS08.json\",\n",
					"    \"SnapshotSerengetiS09.json\",\n",
					"    \"SnapshotSerengetiS10.json\",\n",
					"    \"SnapshotSerengetiS11.json\",\n",
					"};\n",
					"\n",
					"var blob=blobDirectory.GetBlockBlobReference(seasonFiles[0]);\n",
					"\n",
					"var jsnObj=await ReadJsonFile(blob);"
				],
				"execution_count": 109
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"var categories = jsnObj[\"categories\"];\n",
					"var images = jsnObj[\"images\"];\n",
					"\n",
					"await InsertCategoriesAsync(categories);\n",
					"await InsertImagesAsync(images);"
				],
				"execution_count": 111
			}
		]
	}
}