{
	"name": "save_json_data_to_sql",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DefaultPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2da09554-6c53-407c-a6fc-610839cfe13c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_sparkdotnet",
				"display_name": "csharp"
			},
			"language_info": {
				"name": "csharp"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a1a27566-3e3c-42d7-a372-692095cd8521/resourceGroups/SerengetiDataLab/providers/Microsoft.Synapse/workspaces/serengetidatalab/bigDataPools/DefaultPool",
				"name": "DefaultPool",
				"type": "Spark",
				"endpoint": "https://serengetidatalab.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DefaultPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#r \"nuget: Microsoft.Azure.Storage.Common\"\n",
					"#r \"nuget: Microsoft.Azure.Storage.Blob\"\n",
					"#r \"nuget: Microsoft.Azure.Storage.File\"\n",
					"#r \"nuget: Newtonsoft.Json\"\n",
					"#r \"nuget: \""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"using Microsoft.Azure.Storage;\n",
					"using Microsoft.Azure.Storage.Blob;\n",
					"using System.IO;\n",
					"using Newtonsoft.Json;"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CloudBlobContainer blobContainer;\n",
					"CloudBlobDirectory blobDirectory;\n",
					"\n",
					"var storageConnectionString = \"\";\n",
					"var dbConnectionString = \"\";\n",
					"\n",
					"private void InitStorage()\n",
					"{\n",
					"    // Create a FileEndpoint for the destination ADLS\n",
					"    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(storageConnectionString);\n",
					"\n",
					"    var blobClient= storageAccount.CreateCloudBlobClient();\n",
					"    blobContainer =  blobClient.GetContainerReference(\"snapshot-serengeti\");\n",
					"    blobDirectory = blobContainer.GetDirectoryReference(\"metadata\");\n",
					"}"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task<dynamic> ReadJsonFile (CloudBlockBlob jsonBlob)\n",
					"{\n",
					"    using (var memoryStream = new MemoryStream())\n",
					"    {\n",
					"        // Download the JSON file to a memory stream\n",
					"        await jsonBlob.DownloadToStreamAsync(memoryStream);\n",
					"\n",
					"        // Reset the memory stream position\n",
					"        memoryStream.Position = 0;\n",
					"\n",
					"        // Use a JsonTextReader to read the JSON file in chunks\n",
					"        using (var jsonTextReader = new JsonTextReader(new StreamReader(memoryStream)) { CloseInput = false })\n",
					"        {\n",
					"            // Use a JsonSerializer to deserialize the JSON file\n",
					"            var jsonSerializer = new JsonSerializer();\n",
					"\n",
					"            // Read the JSON file in chunks and deserialize it\n",
					"            dynamic jsonObject = jsonSerializer.Deserialize<dynamic>(jsonTextReader);\n",
					"\n",
					"            return jsonObject;\n",
					"        }\n",
					"    }\n",
					"}\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"InitStorage();\n",
					"\n",
					"//season files\n",
					"var seasonFiles = new string[]\n",
					"{\n",
					"    \"SnapshotSerengetiS01.json\",\n",
					"    \"SnapshotSerengetiS02.json\",\n",
					"    \"SnapshotSerengetiS03.json\",\n",
					"    \"SnapshotSerengetiS04.json\",\n",
					"    \"SnapshotSerengetiS05.json\",\n",
					"    \"SnapshotSerengetiS06.json\",\n",
					"    \"SnapshotSerengetiS07.json\",\n",
					"    \"SnapshotSerengetiS08.json\",\n",
					"    \"SnapshotSerengetiS09.json\",\n",
					"    \"SnapshotSerengetiS10.json\",\n",
					"    \"SnapshotSerengetiS11.json\",\n",
					"};\n",
					"\n",
					"var blob=blobDirectory.GetBlockBlobReference(seasonFiles[0]);\n",
					"\n",
					"var jsnObj=await ReadJsonFile(blob);"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Console.WriteLine(JsonConvert.SerializeObject(jsnObj[\"categories\"], Formatting.Indented));"
				],
				"execution_count": 10
			}
		]
	}
}