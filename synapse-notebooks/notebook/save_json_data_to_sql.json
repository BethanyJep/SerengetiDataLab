{
	"name": "save_json_data_to_sql",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DefaultPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3167d046-0177-47bc-a448-1803d300ef88"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "csharp"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a1a27566-3e3c-42d7-a372-692095cd8521/resourceGroups/SerengetiDataLab/providers/Microsoft.Synapse/workspaces/serengetidatalab/bigDataPools/DefaultPool",
				"name": "DefaultPool",
				"type": "Spark",
				"endpoint": "https://serengetidatalab.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DefaultPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#r \"nuget: Microsoft.Azure.Storage.Common\"\n",
					"#r \"nuget: Microsoft.Azure.Storage.Blob\"\n",
					"#r \"nuget: Microsoft.Azure.Storage.File\"\n",
					"#r \"nuget: Newtonsoft.Json\"\n",
					"#r \"nuget: System.Data.SqlClient\""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"using Microsoft.Azure.Storage;\n",
					"using Microsoft.Azure.Storage.Blob;\n",
					"using System.IO;\n",
					"using Newtonsoft.Json;\n",
					"using System.Data.SqlClient;\n",
					"using System.Data;\n",
					"\n",
					"using Microsoft.Spark.Extensions.Azure.Synapse.Analytics.Notebook.MSSparkUtils;"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"public class SerengetiData\n",
					"{\n",
					"    [JsonProperty(\"info\")]\n",
					"    public Info Info { get; set; }\n",
					"\n",
					"    [JsonProperty(\"categories\")]\n",
					"    public List<Category> Categories { get; set; }\n",
					"\n",
					"    [JsonProperty(\"images\")]\n",
					"    public List<Image> Images { get; set; }\n",
					"\n",
					"    [JsonProperty(\"annotations\")]\n",
					"    public List<Annotation> Annotations { get; set; }\n",
					"\n",
					"    public SerengetiData()\n",
					"    {\n",
					"        Info = new Info();\n",
					"        Categories = new List<Category>();\n",
					"        Images = new List<Image>();\n",
					"        Annotations = new List<Annotation>();\n",
					"    }\n",
					"}\n",
					"\n",
					"public class Annotation\n",
					"{\n",
					"    [JsonProperty(\"sequence_level_annotation\")]\n",
					"    public bool SequenceLevelAnnotation { get; set; }\n",
					"\n",
					"    [JsonProperty(\"id\")]\n",
					"    public string Id { get; set; }\n",
					"\n",
					"    [JsonProperty(\"category_id\")]\n",
					"    public long CategoryId { get; set; }\n",
					"\n",
					"    [JsonProperty(\"seq_id\")]\n",
					"    public string SeqId { get; set; }\n",
					"\n",
					"    [JsonProperty(\"season\")]\n",
					"    public string Season { get; set; }\n",
					"\n",
					"    [JsonProperty(\"datetime\")]\n",
					"    public DateTimeOffset Datetime { get; set; }\n",
					"\n",
					"    [JsonProperty(\"subject_id\")]\n",
					"    public string SubjectId { get; set; }\n",
					"\n",
					"    [JsonProperty(\"count\")]\n",
					"    public object Count { get; set; }\n",
					"\n",
					"    [JsonProperty(\"standing\")]\n",
					"    public object Standing { get; set; }\n",
					"\n",
					"    [JsonProperty(\"resting\")]\n",
					"    public object Resting { get; set; }\n",
					"\n",
					"    [JsonProperty(\"moving\")]\n",
					"    public object Moving { get; set; }\n",
					"\n",
					"    [JsonProperty(\"interacting\")]\n",
					"    public object Interacting { get; set; }\n",
					"\n",
					"    [JsonProperty(\"young_present\")]\n",
					"    public object YoungPresent { get; set; }\n",
					"\n",
					"    [JsonProperty(\"image_id\")]\n",
					"    public string ImageId { get; set; }\n",
					"\n",
					"    [JsonProperty(\"location\")]\n",
					"    public string Location { get; set; }\n",
					"}\n",
					"\n",
					"public class Category\n",
					"{\n",
					"    [JsonProperty(\"id\")]\n",
					"    public long Id { get; set; }\n",
					"\n",
					"    [JsonProperty(\"name\")]\n",
					"    public string Name { get; set; }\n",
					"}\n",
					"\n",
					"public class Image\n",
					"{\n",
					"    [JsonProperty(\"id\")]\n",
					"    public string Id { get; set; }\n",
					"\n",
					"    [JsonProperty(\"file_name\")]\n",
					"    public string FileName { get; set; }\n",
					"\n",
					"    [JsonProperty(\"frame_num\")]\n",
					"    public long FrameNum { get; set; }\n",
					"\n",
					"    [JsonProperty(\"seq_id\")]\n",
					"    public string SeqId { get; set; }\n",
					"\n",
					"    [JsonProperty(\"width\")]\n",
					"    public long Width { get; set; }\n",
					"\n",
					"    [JsonProperty(\"height\")]\n",
					"    public long Height { get; set; }\n",
					"\n",
					"    [JsonProperty(\"corrupt\")]\n",
					"    public bool Corrupt { get; set; }\n",
					"\n",
					"    [JsonProperty(\"location\")]\n",
					"    public string Location { get; set; }\n",
					"\n",
					"    [JsonProperty(\"seq_num_frames\")]\n",
					"    public long SeqNumFrames { get; set; }\n",
					"\n",
					"    [JsonProperty(\"datetime\")]\n",
					"    public DateTimeOffset Datetime { get; set; }\n",
					"}\n",
					"\n",
					"public class Info\n",
					"{\n",
					"    [JsonProperty(\"version\")]\n",
					"    public string Version { get; set; }\n",
					"\n",
					"    [JsonProperty(\"description\")]\n",
					"    public string Description { get; set; }\n",
					"\n",
					"    [JsonProperty(\"date_created\")]\n",
					"    public long DateCreated { get; set; }\n",
					"\n",
					"    [JsonProperty(\"contributor\")]\n",
					"    public string Contributor { get; set; }\n",
					"}"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CloudBlobContainer blobContainer;\n",
					"CloudBlobDirectory blobDirectory;\n",
					"SqlConnection sqlConn;\n",
					"\n",
					"var accountKey = Credentials.GetSecret(\"VaultSerengeti\",\"ADLS-AccessKey\");\n",
					"string storageConnectionString = $\"DefaultEndpointsProtocol=https;AccountName=serengeti;AccountKey={accountKey};EndpointSuffix=core.windows.net\";\n",
					"\n",
					"var password = Credentials.GetSecret(\"VaultSerengeti\",\"SqlPoolPassword\");\n",
					"var dbConnectionString = $\"Server=tcp:serengetidatalab.sql.azuresynapse.net,1433;Initial Catalog=dedicateddef;Persist Security Info=False;User ID=sqladminuser;Password={password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;\";\n",
					"\n",
					"var sqlCon = new SqlConnection(dbConnectionString);\n",
					"\n",
					"sqlCon.OpenAsync();\n",
					"\n",
					"private void InitStorageAndDb()\n",
					"{\n",
					"    // Create a FileEndpoint for the destination ADLS\n",
					"    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(storageConnectionString);\n",
					"\n",
					"    var blobClient= storageAccount.CreateCloudBlobClient();\n",
					"    blobContainer =  blobClient.GetContainerReference(\"snapshot-serengeti\");\n",
					"    blobDirectory = blobContainer.GetDirectoryReference(\"metadata\");\n",
					"    sqlConn = new SqlConnection(dbConnectionString);\n",
					"}"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task<T> ReadJsonFileAsync<T> (CloudBlockBlob jsonBlob)\n",
					"{\n",
					"    using (var memoryStream = new MemoryStream())\n",
					"    {\n",
					"        // Download the JSON file to a memory stream\n",
					"        await jsonBlob.DownloadToStreamAsync(memoryStream);\n",
					"\n",
					"        // Reset the memory stream position\n",
					"        memoryStream.Position = 0;\n",
					"\n",
					"        // Use a JsonTextReader to read the JSON file in chunks\n",
					"        using (var jsonTextReader = new JsonTextReader(new StreamReader(memoryStream)) { CloseInput = false })\n",
					"        {\n",
					"            // Use a JsonSerializer to deserialize the JSON file\n",
					"            var jsonSerializer = new JsonSerializer();\n",
					"\n",
					"            // Read the JSON file in chunks and deserialize it\n",
					"            return jsonSerializer.Deserialize<T>(jsonTextReader);\n",
					"        }\n",
					"    }\n",
					"}\n",
					""
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task CreateTablesAsync()\n",
					"{\n",
					"    var commands = new Dictionary<string, string>()\n",
					"    {\n",
					"        {\"images\", \"CREATE TABLE images (id VARCHAR(255), file_name VARCHAR(255), frame_num INT, seq_id VARCHAR(255), width INT, height INT, corrupt BIT, location VARCHAR(255), seq_num_frames INT, datetime DATETIME);\"},\n",
					"        {\"categories\", \"CREATE TABLE categories (id INT, name VARCHAR(255));\"},\n",
					"        {\"annotations\", \"CREATE TABLE annotations ( id VARCHAR(255) NOT NULL, category_id INT NOT NULL, seq_id VARCHAR(255) NOT NULL, season VARCHAR(255) NOT NULL, datetime DATETIME NOT NULL, image_id VARCHAR(255) NOT NULL, location VARCHAR(255) NOT NULL );\"},\n",
					"        {\"train\", \"CREATE TABLE train ( location VARCHAR(255));\"},\n",
					"        {\"val\", \"CREATE TABLE val ( location VARCHAR(255));\"}\n",
					"    };\n",
					"\n",
					"\n",
					"    await sqlConn.OpenAsync();\n",
					"\n",
					"    foreach(var command in commands)\n",
					"    {\n",
					"        using(SqlCommand sqlCmd =new SqlCommand(command.Value, sqlConn))\n",
					"        {\n",
					"            try\n",
					"            {\n",
					"                await sqlCmd.ExecuteNonQueryAsync();\n",
					"                Console.WriteLine($\"Table {command.Key} created successfully.\");\n",
					"            }\n",
					"            catch(Exception ex)\n",
					"            {\n",
					"                Console.WriteLine($\"Error creating table {command.Key}: \" + ex.Message);\n",
					"            }\n",
					"        }   \n",
					"    }\n",
					"\n",
					"    await sqlConn.CloseAsync();\n",
					"}"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task BulkInsertImages(List<Image> images)\n",
					"{\n",
					"    await sqlConn.OpenAsync();\n",
					"\n",
					"    using(var bulkCpy = new SqlBulkCopy(sqlConn))\n",
					"    {\n",
					"        bulkCpy.DestinationTableName=\"images\";\n",
					"\n",
					"        var dataTable = new DataTable();\n",
					"        dataTable.Columns.Add(\"id\", typeof(string));\n",
					"        dataTable.Columns.Add(\"file_name\", typeof(string));\n",
					"        dataTable.Columns.Add(\"frame_num\", typeof(long));\n",
					"        dataTable.Columns.Add(\"seq_id\", typeof(string));\n",
					"        dataTable.Columns.Add(\"width\", typeof(long));\n",
					"        dataTable.Columns.Add(\"height\", typeof(long));\n",
					"        dataTable.Columns.Add(\"corrupt\", typeof(bool));\n",
					"        dataTable.Columns.Add(\"location\", typeof(string));\n",
					"        dataTable.Columns.Add(\"seq_num_frames\", typeof(long));\n",
					"        dataTable.Columns.Add(\"datetime\", typeof(DateTime));\n",
					"\n",
					"        foreach (var image in images)\n",
					"        {\n",
					"            var row = dataTable.NewRow();\n",
					"            row[\"id\"] = image.Id;\n",
					"            row[\"file_name\"] = image.FileName;\n",
					"            row[\"frame_num\"] = image.FrameNum;\n",
					"            row[\"seq_id\"] = image.SeqId;\n",
					"            row[\"width\"] = image.Width;\n",
					"            row[\"height\"] = image.Height;\n",
					"            row[\"corrupt\"] = image.Corrupt;\n",
					"            row[\"location\"] = image.Location;\n",
					"            row[\"seq_num_frames\"] = image.SeqNumFrames;\n",
					"            row[\"datetime\"] = image.Datetime.DateTime;\n",
					"\n",
					"            dataTable.Rows.Add(row);\n",
					"        }\n",
					"\n",
					"        await Task.Run(() => bulkCpy.WriteToServer(dataTable));\n",
					"    }\n",
					"\n",
					"    await sqlConn.CloseAsync();\n",
					"}\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task BulkInsertCategories(List<Category> categories)\n",
					"{\n",
					"    await sqlConn.OpenAsync();\n",
					"\n",
					"    using (var bulkCpy = new SqlBulkCopy(sqlConn))\n",
					"    {\n",
					"        bulkCpy.DestinationTableName = \"categories\";\n",
					"\n",
					"        var dataTable = new DataTable();\n",
					"        dataTable.Columns.Add(\"id\", typeof(long));\n",
					"        dataTable.Columns.Add(\"name\", typeof(string));\n",
					"\n",
					"        foreach(var category in categories)\n",
					"        {\n",
					"            var row = dataTable.NewRow();\n",
					"            row[\"id\"] = category.Id;\n",
					"            row[\"name\"] = category.Name;\n",
					"        }\n",
					"\n",
					"        await Task.Run(() => bulkCpy.WriteToServer(dataTable));\n",
					"    }\n",
					"\n",
					"    await sqlConn.CloseAsync();\n",
					"}\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task BulkInsertAnnotations(List<Annotation> annotations)\n",
					"{\n",
					"    await sqlConn.OpenAsync();\n",
					"\n",
					"    using (var bulkCpy = new SqlBulkCopy(sqlConn))\n",
					"    {\n",
					"        bulkCpy.DestinationTableName = \"annotations\";\n",
					"\n",
					"        var dataTable = new DataTable();\n",
					"        dataTable.Columns.Add(\"id\", typeof(string));\n",
					"        dataTable.Columns.Add(\"category_id\", typeof(long));\n",
					"        dataTable.Columns.Add(\"seq_id\", typeof(string));\n",
					"        dataTable.Columns.Add(\"season\", typeof(string));\n",
					"        dataTable.Columns.Add(\"datetime\", typeof(DateTime));\n",
					"        dataTable.Columns.Add(\"image_id\", typeof(string));\n",
					"        dataTable.Columns.Add(\"location\", typeof(string));\n",
					"\n",
					"        foreach (var annotation in annotations)\n",
					"        {\n",
					"            var row = dataTable.NewRow();\n",
					"            row[\"id\"] = annotation.Id;\n",
					"            row[\"category_id\"] = annotation.CategoryId;\n",
					"            row[\"seq_id\"] = annotation.SeqId;\n",
					"            row[\"season\"] = annotation.Season;\n",
					"            row[\"datetime\"] = annotation.Datetime.LocalDateTime;\n",
					"            row[\"image_id\"] = annotation.ImageId;\n",
					"            row[\"location\"] = annotation.Location;\n",
					"            dataTable.Rows.Add(row);\n",
					"        }\n",
					"\n",
					"        await bulkCpy.WriteToServerAsync(dataTable);\n",
					"    }\n",
					"    await sqlConn.CloseAsync();\n",
					"}\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task BulkInsertSplits(dynamic splitData)\n",
					"{\n",
					"    await sqlConn.OpenAsync();\n",
					"\n",
					"    using (var bulkCpy = new SqlBulkCopy(sqlConn))\n",
					"    {\n",
					"        bulkCpy.DestinationTableName = \"train\";\n",
					"\n",
					"        var dataTable = new DataTable();\n",
					"        dataTable.Columns.Add(\"location\", typeof(string));\n",
					"\n",
					"        foreach (var loc in splitData.splits.train)\n",
					"        {\n",
					"            var row = dataTable.NewRow();\n",
					"            row[\"location\"] = loc;\n",
					"            dataTable.Rows.Add(row);\n",
					"        }\n",
					"\n",
					"        await bulkCpy.WriteToServerAsync(dataTable);\n",
					"    }\n",
					"\n",
					"    using (var bulkCpy = new SqlBulkCopy(sqlConn))\n",
					"    {\n",
					"        bulkCpy.DestinationTableName = \"val\";\n",
					"\n",
					"        var dataTable = new DataTable();\n",
					"        dataTable.Columns.Add(\"location\", typeof(string));\n",
					"\n",
					"        foreach (var loc in splitData.splits.val)\n",
					"        {\n",
					"            var row = dataTable.NewRow();\n",
					"            row[\"location\"] = loc;\n",
					"            dataTable.Rows.Add(row);\n",
					"        }\n",
					"\n",
					"        await bulkCpy.WriteToServerAsync(dataTable);\n",
					"    }\n",
					"}"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"InitStorageAndDb();\n",
					"await CreateTablesAsync();\n",
					"\n",
					"//season files\n",
					"var seasonFiles = new List<string>()\n",
					"{\n",
					"    \"SnapshotSerengetiS01.json\",\n",
					"    \"SnapshotSerengetiS02.json\",\n",
					"    \"SnapshotSerengetiS03.json\",\n",
					"    \"SnapshotSerengetiS04.json\",\n",
					"    \"SnapshotSerengetiS05.json\",\n",
					"    \"SnapshotSerengetiS06.json\",\n",
					"    \"SnapshotSerengetiS07.json\",\n",
					"    \"SnapshotSerengetiS08.json\",\n",
					"    \"SnapshotSerengetiS09.json\",\n",
					"    \"SnapshotSerengetiS10.json\",\n",
					"    \"SnapshotSerengetiS11.json\"\n",
					"};"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"var dataset = new SerengetiData();\n",
					"var options = new ParallelOptions { MaxDegreeOfParallelism = Environment.ProcessorCount };\n",
					"\n",
					"Parallel.ForEach(seasonFiles, options, async file =>\n",
					"{\n",
					"    var blob = blobDirectory.GetBlockBlobReference(file);\n",
					"    var data = await ReadJsonFileAsync<SerengetiData>(blob);\n",
					"\n",
					"    lock (dataset)\n",
					"    {\n",
					"        dataset.Categories.AddRange(data.Categories);\n",
					"        dataset.Annotations.AddRange(data.Annotations);\n",
					"        dataset.Images.AddRange(data.Images);\n",
					"    }\n",
					"});\n",
					""
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Console.WriteLine(dataset.Annotations.Count);"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"var dataset = new SerengetiData();\n",
					"\n",
					"foreach(var file in seasonFiles)\n",
					"{\n",
					"    var blob = blobDirectory.GetBlockBlobReference(file);\n",
					"    var data = await ReadJsonFile<SerengetiData>(blob);\n",
					"\n",
					"    dataset.Categories.AddRange(data.Categories);\n",
					"    dataset.Annotations.AddRange(data.Annotations);\n",
					"    dataset.Images.AddRange(data.Images);\n",
					"}"
				],
				"execution_count": 12
			}
		]
	}
}