{
	"name": "save_json_data_to_sql",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DefaultPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4e4a791a-d3d7-4ada-9862-a0ff8404119c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "csharp"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a1a27566-3e3c-42d7-a372-692095cd8521/resourceGroups/SerengetiDataLab/providers/Microsoft.Synapse/workspaces/serengetidatalab/bigDataPools/DefaultPool",
				"name": "DefaultPool",
				"type": "Spark",
				"endpoint": "https://serengetidatalab.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DefaultPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#r \"nuget: Microsoft.Azure.Storage.Common\"\n",
					"#r \"nuget: Microsoft.Azure.Storage.Blob\"\n",
					"#r \"nuget: Microsoft.Azure.Storage.File\"\n",
					"#r \"nuget: Newtonsoft.Json\"\n",
					"#r \"nuget: System.Data.SqlClient\""
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"using Microsoft.Azure.Storage;\n",
					"using Microsoft.Azure.Storage.Blob;\n",
					"using System.IO;\n",
					"using Newtonsoft.Json;\n",
					"using System.Data.SqlClient;\n",
					""
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CloudBlobContainer blobContainer;\n",
					"CloudBlobDirectory blobDirectory;\n",
					"SqlConnection sqlConn;\n",
					"\n",
					"var storageConnectionString = \"\";\n",
					"var dbConnectionString = \"\";\n",
					"\n",
					"private void InitStorageAndDb()\n",
					"{\n",
					"    // Create a FileEndpoint for the destination ADLS\n",
					"    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(storageConnectionString);\n",
					"\n",
					"    var blobClient= storageAccount.CreateCloudBlobClient();\n",
					"    blobContainer =  blobClient.GetContainerReference(\"snapshot-serengeti\");\n",
					"    blobDirectory = blobContainer.GetDirectoryReference(\"metadata\");\n",
					"    sqlConn = new SqlConnection(dbConnectionString);\n",
					"}"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task<dynamic> ReadJsonFile (CloudBlockBlob jsonBlob)\n",
					"{\n",
					"    using (var memoryStream = new MemoryStream())\n",
					"    {\n",
					"        // Download the JSON file to a memory stream\n",
					"        await jsonBlob.DownloadToStreamAsync(memoryStream);\n",
					"\n",
					"        // Reset the memory stream position\n",
					"        memoryStream.Position = 0;\n",
					"\n",
					"        // Use a JsonTextReader to read the JSON file in chunks\n",
					"        using (var jsonTextReader = new JsonTextReader(new StreamReader(memoryStream)) { CloseInput = false })\n",
					"        {\n",
					"            // Use a JsonSerializer to deserialize the JSON file\n",
					"            var jsonSerializer = new JsonSerializer();\n",
					"\n",
					"            // Read the JSON file in chunks and deserialize it\n",
					"            dynamic jsonObject = jsonSerializer.Deserialize<dynamic>(jsonTextReader);\n",
					"\n",
					"            return jsonObject;\n",
					"        }\n",
					"    }\n",
					"}\n",
					""
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"InitStorageAndDb();\n",
					"\n",
					"//season files\n",
					"var seasonFiles = new string[]\n",
					"{\n",
					"    \"SnapshotSerengetiS01.json\",\n",
					"    \"SnapshotSerengetiS02.json\",\n",
					"    \"SnapshotSerengetiS03.json\",\n",
					"    \"SnapshotSerengetiS04.json\",\n",
					"    \"SnapshotSerengetiS05.json\",\n",
					"    \"SnapshotSerengetiS06.json\",\n",
					"    \"SnapshotSerengetiS07.json\",\n",
					"    \"SnapshotSerengetiS08.json\",\n",
					"    \"SnapshotSerengetiS09.json\",\n",
					"    \"SnapshotSerengetiS10.json\",\n",
					"    \"SnapshotSerengetiS11.json\",\n",
					"};\n",
					"\n",
					"var blob=blobDirectory.GetBlockBlobReference(seasonFiles[0]);\n",
					"\n",
					"var jsnObj=await ReadJsonFile(blob);"
				],
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Create the tables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Dictionary<string, string> commands = new Dictionary<string, string>()\n",
					"{\n",
					"    {\"images\", \"CREATE TABLE images (id VARCHAR(255), file_name VARCHAR(255), frame_num INT, seq_id VARCHAR(255), width INT, height INT, corrupt BIT, location VARCHAR(255), seq_num_frames INT, datetime DATETIME);\"},\n",
					"    {\"categories\", \"CREATE TABLE categories (id INT, name VARCHAR(255));\"},\n",
					"    {\"annotations\", \"CREATE TABLE annotations (id VARCHAR(36) NOT NULL, category_id INT NOT NULL, seq_id VARCHAR(20) NOT NULL, season VARCHAR(2) NOT NULL, datetime DATETIME NOT NULL, subject_id VARCHAR(10) NOT NULL, count INT NOT NULL, standing DECIMAL(4, 2) NOT NULL, resting DECIMAL(4, 2) NOT NULL, moving DECIMAL(4, 2) NOT NULL, interacting DECIMAL(4, 2) NOT NULL, young_present DECIMAL(4, 2) NOT NULL, image_id VARCHAR(50) NOT NULL, location VARCHAR(3) NOT NULL, sequence_level_annotation BIT NOT NULL)\"}\n",
					"};\n",
					"\n",
					"await sqlConn.OpenAsync();\n",
					"\n",
					"foreach(var command in commands)\n",
					"{\n",
					"    using(SqlCommand sqlCmd =new SqlCommand(command.Value, sqlConn))\n",
					"    {\n",
					"        try\n",
					"        {\n",
					"            await sqlCmd.ExecuteNonQueryAsync();\n",
					"            Console.WriteLine($\"Table {command.Key} created successfully.\");\n",
					"        }\n",
					"        catch(Exception ex)\n",
					"        {\n",
					"            Console.WriteLine($\"Error creating table {command.Key}: \" + ex.Message);\n",
					"        }\n",
					"    }   \n",
					"}\n",
					"\n",
					"await sqlConn.CloseAsync();\n",
					""
				],
				"execution_count": 81
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"private async Task InsertCategoriesAsync(dynamic categories)\n",
					"{\n",
					"    await sqlConn.OpenAsync();\n",
					"\n",
					"    // Create a temporary table to store the data you want to insert\n",
					"    using (SqlCommand createTempTableCmd = new SqlCommand(\"CREATE TABLE #temp_categories (id INT, name VARCHAR(255));\", sqlConn))\n",
					"    {\n",
					"        createTempTableCmd.ExecuteNonQuery();\n",
					"    }\n",
					"\n",
					"    // Insert data into the temporary table\n",
					"    string insertIntoTempTableCommand = \"INSERT INTO #temp_categories (id, name) VALUES (@id, @name)\";\n",
					"    foreach (var category in categories)\n",
					"    {\n",
					"        using (SqlCommand insertIntoTempTableCmd = new SqlCommand(insertIntoTempTableCommand, sqlConn))\n",
					"        {\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@id\", (string)category[\"id\"]);\n",
					"            insertIntoTempTableCmd.Parameters.AddWithValue(\"@name\", (string)category[\"name\"]);\n",
					"\n",
					"            insertIntoTempTableCmd.ExecuteNonQuery();\n",
					"        }\n",
					"    }\n",
					"\n",
					"    // Insert only unique records into the target table\n",
					"    string insertIntoCategoriesCommand = \"INSERT INTO categories (id, name) SELECT id, name FROM #temp_categories WHERE NOT EXISTS (SELECT 1 FROM categories WHERE categories.id = #temp_categories.id)\";\n",
					"    using (SqlCommand insertIntoCategoriesCmd = new SqlCommand(insertIntoCategoriesCommand, sqlConn))\n",
					"    {\n",
					"        insertIntoCategoriesCmd.ExecuteNonQuery();\n",
					"    }\n",
					"\n",
					"    // Drop the temporary table\n",
					"    using (SqlCommand dropTempTableCmd = new SqlCommand(\"DROP TABLE #temp_categories\", sqlConn))\n",
					"    {\n",
					"        dropTempTableCmd.ExecuteNonQuery();\n",
					"    }\n",
					"\n",
					"    await sqlConn.CloseAsync();\n",
					"}"
				],
				"execution_count": 78
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"var categories = jsnObj[\"categories\"];\n",
					"\n",
					"await InsertCategoriesAsync(categories);"
				],
				"execution_count": 83
			}
		]
	}
}